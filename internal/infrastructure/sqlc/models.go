// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package sqlc

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type ReleaseType string

const (
	ReleaseTypeAlbum       ReleaseType = "album"
	ReleaseTypeEp          ReleaseType = "ep"
	ReleaseTypeSingle      ReleaseType = "single"
	ReleaseTypeCompilation ReleaseType = "compilation"
)

func (e *ReleaseType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ReleaseType(s)
	case string:
		*e = ReleaseType(s)
	default:
		return fmt.Errorf("unsupported scan type for ReleaseType: %T", src)
	}
	return nil
}

type NullReleaseType struct {
	ReleaseType ReleaseType
	Valid       bool // Valid is true if ReleaseType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullReleaseType) Scan(value interface{}) error {
	if value == nil {
		ns.ReleaseType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ReleaseType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullReleaseType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ReleaseType), nil
}

type Artist struct {
	ID        pgtype.UUID
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
	Name      string
	Bio       pgtype.Text
	ImageUrl  pgtype.Text
}

type Release struct {
	ID          int64
	CreatedAt   pgtype.Timestamp
	UpdatedAt   pgtype.Timestamp
	Title       string
	ReleaseType ReleaseType
	ImageUrl    pgtype.Text
	ArtistID    pgtype.UUID
}
